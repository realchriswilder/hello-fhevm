/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConfidentialVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "allowTallyAccess"
      | "castVote"
      | "getEncryptedTally"
      | "grantMyVoteDecryptAccess"
      | "hasVoted"
      | "isRegistered"
      | "makeTallyPublic"
      | "protocolId"
      | "registerVoter"
      | "verifyVote"
      | "votingEndTime"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TallyAccessGranted"
      | "VoteCast"
      | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowTallyAccess",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTally",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantMyVoteDecryptAccess",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTallyPublic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVote",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEndTime",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowTallyAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMyVoteDecryptAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTallyPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEndTime",
    data: BytesLike
  ): Result;
}

export namespace TallyAccessGrantedEvent {
  export type InputTuple = [viewer: AddressLike, extraData: BytesLike];
  export type OutputTuple = [viewer: string, extraData: string];
  export interface OutputObject {
    viewer: string;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [voter: AddressLike, extraData: BytesLike];
  export type OutputTuple = [voter: string, extraData: string];
  export interface OutputObject {
    voter: string;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voter: AddressLike, extraData: BytesLike];
  export type OutputTuple = [voter: string, extraData: string];
  export interface OutputObject {
    voter: string;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialVoting extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialVoting;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  allowTallyAccess: TypedContractMethod<
    [viewer: AddressLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [
      voteHandle: BytesLike,
      weightHandle: BytesLike,
      attestation: BytesLike,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEncryptedTally: TypedContractMethod<
    [],
    [[string, string] & { yesHandle: string; noHandle: string }],
    "view"
  >;

  grantMyVoteDecryptAccess: TypedContractMethod<
    [voteHandle: BytesLike, attestation: BytesLike],
    [void],
    "nonpayable"
  >;

  hasVoted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  makeTallyPublic: TypedContractMethod<[], [void], "nonpayable">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registerVoter: TypedContractMethod<
    [voter: AddressLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;

  verifyVote: TypedContractMethod<
    [voteHandle: BytesLike, attestation: BytesLike],
    [void],
    "nonpayable"
  >;

  votingEndTime: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowTallyAccess"
  ): TypedContractMethod<
    [viewer: AddressLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      voteHandle: BytesLike,
      weightHandle: BytesLike,
      attestation: BytesLike,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedTally"
  ): TypedContractMethod<
    [],
    [[string, string] & { yesHandle: string; noHandle: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantMyVoteDecryptAccess"
  ): TypedContractMethod<
    [voteHandle: BytesLike, attestation: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "makeTallyPublic"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [voter: AddressLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyVote"
  ): TypedContractMethod<
    [voteHandle: BytesLike, attestation: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingEndTime"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "TallyAccessGranted"
  ): TypedContractEvent<
    TallyAccessGrantedEvent.InputTuple,
    TallyAccessGrantedEvent.OutputTuple,
    TallyAccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "TallyAccessGranted(address,bytes)": TypedContractEvent<
      TallyAccessGrantedEvent.InputTuple,
      TallyAccessGrantedEvent.OutputTuple,
      TallyAccessGrantedEvent.OutputObject
    >;
    TallyAccessGranted: TypedContractEvent<
      TallyAccessGrantedEvent.InputTuple,
      TallyAccessGrantedEvent.OutputTuple,
      TallyAccessGrantedEvent.OutputObject
    >;

    "VoteCast(address,bytes)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterRegistered(address,bytes)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
