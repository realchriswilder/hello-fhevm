/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SimpleVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createSession"
      | "getSession"
      | "getSessionCount"
      | "hasVoted"
      | "protocolId"
      | "requestTallyReveal"
      | "resolveTallyCallback"
      | "sessions"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "SessionCreated"
      | "SessionResolved"
      | "TallyRevealRequested"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createSession",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSession",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSessionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTallyReveal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveTallyCallback",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sessions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSessionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestTallyReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveTallyCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sessions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionCreatedEvent {
  export type InputTuple = [
    sessionId: BigNumberish,
    creator: AddressLike,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    sessionId: bigint,
    creator: string,
    endTime: bigint
  ];
  export interface OutputObject {
    sessionId: bigint;
    creator: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionResolvedEvent {
  export type InputTuple = [
    sessionId: BigNumberish,
    yesVotes: BigNumberish,
    noVotes: BigNumberish
  ];
  export type OutputTuple = [
    sessionId: bigint,
    yesVotes: bigint,
    noVotes: bigint
  ];
  export interface OutputObject {
    sessionId: bigint;
    yesVotes: bigint;
    noVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyRevealRequestedEvent {
  export type InputTuple = [sessionId: BigNumberish, requestId: BigNumberish];
  export type OutputTuple = [sessionId: bigint, requestId: bigint];
  export interface OutputObject {
    sessionId: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [sessionId: BigNumberish, voter: AddressLike];
  export type OutputTuple = [sessionId: bigint, voter: string];
  export interface OutputObject {
    sessionId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleVoting extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleVoting;
  waitForDeployment(): Promise<this>;

  interface: SimpleVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createSession: TypedContractMethod<
    [durationSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  getSession: TypedContractMethod<
    [sessionId: BigNumberish],
    [
      [string, bigint, boolean, bigint, bigint] & {
        creator: string;
        endTime: bigint;
        resolved: boolean;
        yesVotes: bigint;
        noVotes: bigint;
      }
    ],
    "view"
  >;

  getSessionCount: TypedContractMethod<[], [bigint], "view">;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestTallyReveal: TypedContractMethod<
    [sessionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  resolveTallyCallback: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sessions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string, boolean, bigint, bigint, bigint] & {
        creator: string;
        endTime: bigint;
        yesVotes: string;
        noVotes: string;
        resolved: boolean;
        revealedYes: bigint;
        revealedNo: bigint;
        decryptionRequestId: bigint;
      }
    ],
    "view"
  >;

  vote: TypedContractMethod<
    [sessionId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createSession"
  ): TypedContractMethod<[durationSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getSession"
  ): TypedContractMethod<
    [sessionId: BigNumberish],
    [
      [string, bigint, boolean, bigint, bigint] & {
        creator: string;
        endTime: bigint;
        resolved: boolean;
        yesVotes: bigint;
        noVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSessionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestTallyReveal"
  ): TypedContractMethod<[sessionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveTallyCallback"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sessions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string, boolean, bigint, bigint, bigint] & {
        creator: string;
        endTime: bigint;
        yesVotes: string;
        noVotes: string;
        resolved: boolean;
        revealedYes: bigint;
        revealedNo: bigint;
        decryptionRequestId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [sessionId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "SessionCreated"
  ): TypedContractEvent<
    SessionCreatedEvent.InputTuple,
    SessionCreatedEvent.OutputTuple,
    SessionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SessionResolved"
  ): TypedContractEvent<
    SessionResolvedEvent.InputTuple,
    SessionResolvedEvent.OutputTuple,
    SessionResolvedEvent.OutputObject
  >;
  getEvent(
    key: "TallyRevealRequested"
  ): TypedContractEvent<
    TallyRevealRequestedEvent.InputTuple,
    TallyRevealRequestedEvent.OutputTuple,
    TallyRevealRequestedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "SessionCreated(uint256,address,uint256)": TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;
    SessionCreated: TypedContractEvent<
      SessionCreatedEvent.InputTuple,
      SessionCreatedEvent.OutputTuple,
      SessionCreatedEvent.OutputObject
    >;

    "SessionResolved(uint256,uint8,uint8)": TypedContractEvent<
      SessionResolvedEvent.InputTuple,
      SessionResolvedEvent.OutputTuple,
      SessionResolvedEvent.OutputObject
    >;
    SessionResolved: TypedContractEvent<
      SessionResolvedEvent.InputTuple,
      SessionResolvedEvent.OutputTuple,
      SessionResolvedEvent.OutputObject
    >;

    "TallyRevealRequested(uint256,uint256)": TypedContractEvent<
      TallyRevealRequestedEvent.InputTuple,
      TallyRevealRequestedEvent.OutputTuple,
      TallyRevealRequestedEvent.OutputObject
    >;
    TallyRevealRequested: TypedContractEvent<
      TallyRevealRequestedEvent.InputTuple,
      TallyRevealRequestedEvent.OutputTuple,
      TallyRevealRequestedEvent.OutputObject
    >;

    "VoteCast(uint256,address)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
